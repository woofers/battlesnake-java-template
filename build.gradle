plugins {
    id 'java'
    id 'war'
    id 'io.franzbecker.gradle-lombok' version '2.1'
    id "com.diffplug.gradle.spotless" version "3.18.0"
}

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'sh', './version.sh'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

group = 'com.battlesnake'
description = "Battlesnake"
version = getVersionName()

sourceCompatibility = 1.11
targetCompatibility = 1.11

war {
    archiveName = rootProject.name + '.war'
    doFirst {
        manifest {
            attributes("Implementation-Title": project.name,
                       "Implementation-Version": version,
                       "Implementation-Timestamp": new Date()
            )
        }
    }
}
war.mustRunAfter clean

ext {
    gsonVersion = '2.8.5'
    junitVersion = '5.4.0'
    log4jVersion = '2.11.2'
    tomcatVersion = '9.0.16'
    webappRunnerVersion = "$tomcatVersion.0"
    wsVersion = '2.1'
    lombokVersion = '1.18.6'
}

lombok {
    version = "$lombokVersion"
    sha256 = ""
}

spotless {
  java {
    target 'src/**/*.java'

    importOrder 'java', 'javax', 'org', 'com'
    removeUnusedImports()
  }
}

repositories {
    mavenCentral()
    maven {
        url "https://artifactory.cronapp.io/public-release/"
    }
}

dependencies {
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "com.google.code.gson:gson-extras:$gsonVersion"
    compile "org.apache.tomcat:tomcat-servlet-api:$tomcatVersion"
    compile "javax.ws.rs:javax.ws.rs-api:$wsVersion"
    compile "org.apache.logging.log4j:log4j-api:$log4jVersion"
    compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
    compile "org.apache.logging.log4j:log4j-web:$log4jVersion"
    providedCompile "com.github.jsimone:webapp-runner:$webappRunnerVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

clean.doFirst {
    delete "${rootDir}/target"
}

task copyRunner(type: Copy) {
    into "$buildDir/server"
    from(configurations.compile) {
        include "webapp-runner*"
    }
}

task stage() {
    dependsOn clean, war
}
stage.dependsOn(copyRunner)

task run() {
    dependsOn stage
    doLast {
        exec {
            workingDir "$buildDir"
            commandLine 'java', '-jar',
              "server/webapp-runner-${rootProject.ext.webappRunnerVersion}.jar",
              "libs/$war.archiveName"
        }
    }
}

import io.franzbecker.gradle.lombok.task.DelombokTask

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}
